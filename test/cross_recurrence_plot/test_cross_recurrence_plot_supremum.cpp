/* 
 * File:   test_cross_recurrence_plot_supremum.cpp
 * Author: Barbara Reis
 * Date:   12.06.2020
 */
#include <stdlib.h>
#include <iostream>
#include "../../CrossRecurrencePlot.h"

void test_delay_time_series_1(int rp_delay){
    int delay = 2;
    if(delay == rp_delay)
        cout << "test_delay_time_series_1() passed" << endl;
    else
        cout << "test_delay_time_series_1() failed: " << delay << " != " 
             << rp_delay << endl;
}

void test_delay_time_series_2(int rp_delay){
    int delay = 3;
    if(delay == rp_delay)
        cout << "test_delay_time_series_2() passed" << endl;
    else
        cout << "test_delay_time_series_2() failed: " << delay << " != " 
             << rp_delay << endl;
}

void test_dimension(int rp_dimension){
    int dimension = 3;    
    if(dimension == rp_dimension)
        cout << "test_dimension() passed" << endl;
    else
        cout << "test_dimension() failed: " << dimension << " != " 
             << rp_dimension << endl;
}

void test_time_series_1_length(int rp_time_series_1_length){
    int time_series_1_length = 40;    
    if(time_series_1_length == rp_time_series_1_length)
        cout << "test_time_series_1_length() passed" << endl;
    else    
        cout << "test_time_series_1_length() failed: " << time_series_1_length 
             << " != " << rp_time_series_1_length << endl;    
}

void test_time_series_2_length(int rp_time_series_2_length){
    int time_series_2_length = 39;    
    if(time_series_2_length == rp_time_series_2_length)
        cout << "test_time_series_2_length() passed" << endl;
    else    
        cout << "test_time_series_2_length() failed: " << time_series_2_length 
             << " != " << rp_time_series_2_length << endl;    
}

void test_time_series_1(double* rp_time_series_1){
    double time_series_1[] = {0.20000000, 0.60800000, 0.90567680, 0.32462007, 
                              0.83311914, 0.52832022, 0.94695227, 0.19088795, 
                              0.58690901, 0.92129793, 0.27553060, 0.75853125, 
                              0.69601406, 0.80399826, 0.59882321, 0.91288909, 
                              0.30218586, 0.80130435, 0.60501961, 0.90808935, 
                              0.31715971, 0.82296382, 0.55363861, 0.93906702, 
                              0.21743658, 0.64660007, 0.86833200, 0.43445986, 
                              0.93367706, 0.23531199, 0.68377297, 0.82166448, 
                              0.55682146, 0.93773102, 0.22188790, 0.65608392, 
                              0.85742368, 0.46454358, 0.94522280, 0.19675130};
    bool found_error = false;
    int i;    
    for(i = 0; i < 40; i++){
        if(time_series_1[i] != rp_time_series_1[i]){
            found_error = true;
            break;
        }
    }
    if(!found_error)
        cout << "test_time_series_1() passed" << endl;
    else
        cout << "test_time_series_1() failed: time series value error at " 
             << i << " ( " << time_series_1[i] << " != " << rp_time_series_1[i] 
             << " )" << endl;
}

void test_time_series_2(double* rp_time_series_2){
    double time_series_2[] = {0.20001000, 0.64002400, 0.92157312, 0.28910442, 
                              0.82209222, 0.58502640, 0.97108205, 0.11232682, 
                              0.39883801, 0.95906501, 0.15703728, 0.52950629, 
                              0.99651751, 0.01388143, 0.05475495, 0.20702737, 
                              0.65666815, 0.90182036, 0.35416159, 0.91492463, 
                              0.31135020, 0.85764502, 0.48836017, 0.99945806, 
                              0.00216660, 0.00864760, 0.03429129, 0.13246159, 
                              0.45966208, 0.99349141, 0.02586492, 0.10078369, 
                              0.36250535, 0.92438088, 0.27960346, 0.80570146, 
                              0.62618647, 0.93630790, 0.23854168};
    bool found_error = false;
    int i;    
    for(i = 0; i < 39; i++){
        if(time_series_2[i] != rp_time_series_2[i]){
            found_error = true;
            break;
        }
    }
    if(!found_error)
        cout << "test_time_series_2() passed" << endl;
    else
        cout << "test_time_series_2() failed: time series value error at " 
             << i << " ( " << time_series_2[i] << " != " << rp_time_series_2[i] 
             << " )" << endl;
}

void test_threshold(double rp_threshold){
    double threshold = 0.5;
    if(threshold == rp_threshold)
        cout << "test_threshold() passed" << endl;
    else
        cout << "test_threshold() failed: " << threshold << " != " 
             << rp_threshold << endl;
}

void test_norm(string rp_norm){
    string norm = "supremum";
    if(norm.compare(rp_norm) == 0)
        cout << "test_norm() passed" << endl;
    else
        cout << "test_norm() failed: " << norm << " != " << rp_norm << endl;
}

void test_number_of_vectors_1(int rp_number_of_vectors_1){
    int number_of_vectors_1 = 36;    
    if(number_of_vectors_1 == rp_number_of_vectors_1)
        cout << "test_number_of_vectors_1() passed" << endl;
    else
        cout << "test_number_of_vectors_1() failed: " << number_of_vectors_1 
             << " != " << rp_number_of_vectors_1 << endl;
}

void test_number_of_vectors_2(int rp_number_of_vectors_2){
    int number_of_vectors_2 = 33;    
    if(number_of_vectors_2 == rp_number_of_vectors_2)
        cout << "test_number_of_vectors_2() passed" << endl;
    else
        cout << "test_number_of_vectors_2() failed: " << number_of_vectors_2 
             << " != " << rp_number_of_vectors_2 << endl;
}

void test_cross_distance_matrix(double** crp_distance_matrix){
    double distance_matrix[36][33] = 
       {{0.616572,0.720792,0.721573,0.125946,0.793350,0.506839,0.771082,0.819238,0.778364,0.759065,0.891795,0.850922,0.796517,0.249009,0.521769,0.551515,0.456668,0.701820,0.830953,0.824472,0.798828,0.903510,0.897029,0.871386,0.807254,0.732335,0.470614,0.879812,0.804893,0.793491,0.206933,0.626073,0.594577},
        {0.442762,0.497472,0.313573,0.646462,0.371283,0.074218,0.634445,0.514439,0.473565,0.671897,0.450963,0.373500,0.388517,0.594119,0.577200,0.400973,0.590305,0.471138,0.533025,0.519673,0.674838,0.395859,0.315972,0.465171,0.605833,0.599352,0.668871,0.475538,0.248717,0.385491,0.599761,0.507216,0.481081},
        {0.705667,0.834625,0.548114,0.616572,0.789915,0.434281,0.125946,0.933071,0.892197,0.739925,0.819238,0.778364,0.626092,0.891795,0.850922,0.698649,0.458592,0.521769,0.944786,0.938305,0.912661,0.830953,0.824472,0.798828,0.921087,0.897029,0.871386,0.807254,0.732335,0.470614,0.879812,0.804893,0.708411},
        {0.780194,0.315404,0.596953,0.768177,0.497472,0.338618,0.805630,0.371283,0.136133,0.634445,0.514439,0.710932,0.671897,0.724037,0.373500,0.666757,0.386604,0.808570,0.329325,0.590305,0.471138,0.533025,0.519673,0.802603,0.395859,0.315972,0.465171,0.733493,0.427537,0.668871,0.435299,0.745420,0.277381},
        {0.657848,0.474582,0.361926,0.544015,0.834625,0.548114,0.409609,0.789915,0.532154,0.379882,0.933071,0.892197,0.739925,0.819238,0.778364,0.626092,0.176451,0.635602,0.584742,0.578261,0.552618,0.944786,0.938305,0.912661,0.830953,0.824472,0.798828,0.921087,0.846169,0.584447,0.807254,0.732335,0.470614},
        {0.328310,0.808971,0.522460,0.780194,0.764261,0.391792,0.768177,0.907417,0.866543,0.805630,0.371283,0.136133,0.567136,0.514439,0.710932,0.321293,0.724037,0.373500,0.919131,0.912650,0.887007,0.788836,0.461636,0.471138,0.895433,0.820514,0.802603,0.395859,0.641694,0.465171,0.733493,0.427537,0.682756},
        {0.746942,0.306928,0.123307,0.683534,0.474582,0.361926,0.720987,0.834625,0.548114,0.409609,0.789915,0.626290,0.379882,0.933071,0.892197,0.739925,0.328016,0.723927,0.592791,0.266883,0.635602,0.584742,0.578261,0.717961,0.944786,0.938305,0.912661,0.814491,0.487290,0.530171,0.921087,0.846169,0.584447},
        {0.632194,0.646204,0.730685,0.200534,0.808971,0.522460,0.780194,0.764261,0.703776,0.768177,0.907417,0.866543,0.805630,0.264630,0.447181,0.567136,0.465780,0.710932,0.756365,0.749884,0.724240,0.919131,0.912650,0.887007,0.788836,0.657748,0.396026,0.895433,0.820514,0.802603,0.165023,0.641694,0.519990},
        {0.386899,0.583687,0.334664,0.695551,0.538977,0.166508,0.683534,0.682133,0.641259,0.720987,0.429872,0.220776,0.409609,0.573028,0.626290,0.379882,0.639394,0.314911,0.693847,0.687366,0.723927,0.563552,0.266883,0.412549,0.670149,0.595230,0.717961,0.454447,0.416411,0.406582,0.648850,0.486125,0.530171},
        {0.721288,0.691671,0.405160,0.632194,0.646961,0.359693,0.200534,0.808971,0.749243,0.596971,0.764261,0.703776,0.551504,0.907417,0.866543,0.714271,0.315638,0.447181,0.801832,0.795351,0.769707,0.756365,0.749884,0.724240,0.919131,0.912650,0.887007,0.788836,0.657748,0.396026,0.895433,0.820514,0.565457},
        {0.406910,0.486496,0.646043,0.360242,0.583687,0.309496,0.695551,0.584942,0.544068,0.683534,0.682133,0.641259,0.720987,0.316101,0.287473,0.341852,0.381138,0.626290,0.596657,0.639394,0.564532,0.693847,0.687366,0.723927,0.572958,0.498040,0.297477,0.670149,0.595230,0.717961,0.249666,0.416411,0.360282},
        {0.558521,0.800562,0.514051,0.469427,0.755852,0.405160,0.212551,0.899008,0.858134,0.705862,0.790117,0.749243,0.596971,0.744650,0.703776,0.551504,0.424529,0.492648,0.910722,0.904242,0.878598,0.801832,0.795351,0.769707,0.887024,0.812105,0.724240,0.778133,0.703215,0.441493,0.732666,0.657748,0.674347},
        {0.668896,0.223269,0.225559,0.656879,0.486496,0.227320,0.694332,0.583687,0.297176,0.397694,0.584942,0.599635,0.391796,0.682133,0.641259,0.555459,0.316101,0.697272,0.341852,0.293538,0.400635,0.596657,0.590176,0.691306,0.693847,0.687366,0.661723,0.622195,0.498040,0.503516,0.670149,0.634122,0.333509},
        {0.623785,0.688978,0.402466,0.514894,0.800562,0.514051,0.195213,0.787423,0.746549,0.594277,0.899008,0.858134,0.705862,0.790117,0.749243,0.596971,0.312944,0.601539,0.799138,0.792657,0.767013,0.910722,0.904242,0.878598,0.801832,0.795351,0.769707,0.887024,0.812105,0.550384,0.778133,0.703215,0.562763},
        {0.398813,0.519906,0.322750,0.668896,0.447982,0.096652,0.656879,0.591138,0.550265,0.694332,0.441786,0.296801,0.397694,0.584942,0.599635,0.391796,0.612739,0.394438,0.602853,0.596372,0.697272,0.472558,0.293538,0.400635,0.596657,0.590176,0.691306,0.466362,0.325416,0.394668,0.622195,0.498040,0.503516},
        {0.712879,0.795763,0.509251,0.623785,0.751052,0.402466,0.157761,0.894208,0.853334,0.701062,0.787423,0.746549,0.594277,0.899008,0.858134,0.705862,0.419729,0.489954,0.905923,0.899442,0.873798,0.799138,0.792657,0.767013,0.910722,0.904242,0.878598,0.780428,0.700521,0.438799,0.887024,0.812105,0.669548},
        {0.653922,0.337838,0.619387,0.641905,0.519906,0.282841,0.679358,0.447982,0.262405,0.656879,0.591138,0.584661,0.694332,0.597765,0.296801,0.540485,0.354482,0.682298,0.314993,0.612739,0.394438,0.602853,0.596372,0.697272,0.472558,0.293538,0.388472,0.607221,0.504236,0.691306,0.319361,0.619148,0.200682},
        {0.618985,0.710637,0.424126,0.512200,0.795763,0.509251,0.173554,0.809082,0.768209,0.615936,0.894208,0.853334,0.701062,0.787423,0.746549,0.594277,0.334604,0.596739,0.820797,0.814316,0.788673,0.905923,0.899442,0.873798,0.799138,0.792657,0.767013,0.882224,0.807306,0.545584,0.775439,0.700521,0.584422},
        {0.417443,0.504933,0.316554,0.653922,0.396601,0.081678,0.641905,0.539757,0.498884,0.679358,0.447982,0.348182,0.391498,0.591138,0.584661,0.397992,0.597765,0.445819,0.551472,0.544991,0.682298,0.421177,0.308512,0.439853,0.602853,0.596372,0.676332,0.472558,0.274035,0.388472,0.607221,0.504236,0.488542},
        {0.708079,0.826740,0.540229,0.618985,0.782030,0.424126,0.136101,0.925186,0.884312,0.732040,0.809082,0.768209,0.615936,0.894208,0.853334,0.701062,0.450707,0.511614,0.936900,0.930419,0.904776,0.820797,0.814316,0.788673,0.913202,0.899442,0.873798,0.797099,0.722180,0.460458,0.882224,0.807306,0.700525},
        {0.753645,0.322864,0.604413,0.741628,0.504933,0.312070,0.779081,0.396601,0.162682,0.641905,0.539757,0.684384,0.679358,0.697488,0.348182,0.640208,0.361286,0.782021,0.304006,0.597765,0.445819,0.551472,0.544991,0.776055,0.421177,0.308512,0.439853,0.706944,0.452855,0.676332,0.408750,0.718871,0.252063},
        {0.649963,0.534273,0.354041,0.533859,0.826740,0.540229,0.349917,0.782030,0.591845,0.439573,0.925186,0.884312,0.732040,0.809082,0.768209,0.615936,0.166296,0.627717,0.644433,0.637952,0.612309,0.936900,0.930419,0.904776,0.820797,0.814316,0.788673,0.913202,0.838283,0.576562,0.797099,0.722180,0.460458},
        {0.353629,0.756005,0.469494,0.753645,0.711295,0.338826,0.741628,0.854451,0.813577,0.779081,0.396601,0.162682,0.514170,0.539757,0.684384,0.346611,0.697488,0.348182,0.866165,0.859684,0.834041,0.735870,0.408670,0.445819,0.842467,0.767548,0.776055,0.421177,0.588729,0.439853,0.706944,0.452855,0.629790},
        {0.739057,0.322133,0.061574,0.649963,0.534273,0.354041,0.562058,0.826740,0.540229,0.349917,0.782030,0.591845,0.439573,0.925186,0.884312,0.732040,0.282399,0.564998,0.584905,0.425812,0.627717,0.644433,0.637952,0.612309,0.936900,0.930419,0.904776,0.806605,0.545816,0.371242,0.913202,0.838283,0.576562},
        {0.579228,0.821350,0.704137,0.102750,0.776640,0.469494,0.753645,0.919796,0.878922,0.741628,0.854451,0.813577,0.779081,0.211664,0.622327,0.514170,0.445317,0.684384,0.931510,0.925029,0.899386,0.866165,0.859684,0.834041,0.907812,0.832893,0.571172,0.842467,0.767548,0.776055,0.307491,0.588729,0.695135},
        {0.735770,0.387632,0.274973,0.723753,0.322133,0.294194,0.761205,0.534273,0.247762,0.562058,0.489563,0.666508,0.349917,0.679613,0.591845,0.622333,0.480465,0.764146,0.423185,0.268325,0.564998,0.432293,0.425812,0.758179,0.644433,0.637952,0.612309,0.689069,0.333676,0.570389,0.620735,0.700996,0.371242},
        {0.668322,0.571446,0.348651,0.579228,0.821350,0.534839,0.312745,0.776640,0.629018,0.476746,0.919796,0.878922,0.726650,0.854451,0.813577,0.661305,0.211664,0.622327,0.681606,0.675125,0.649482,0.931510,0.925029,0.899386,0.866165,0.859684,0.834041,0.907812,0.832893,0.571172,0.842467,0.767548,0.505827},
        {0.234450,0.709338,0.487113,0.735770,0.664627,0.292158,0.723753,0.807783,0.766910,0.761205,0.277423,0.180557,0.562058,0.421356,0.666508,0.227432,0.679613,0.467360,0.819498,0.813017,0.787373,0.689203,0.362002,0.564998,0.795800,0.720881,0.758179,0.301998,0.542061,0.559032,0.689069,0.333676,0.583123},
        {0.733667,0.444495,0.157983,0.644573,0.571446,0.348651,0.439696,0.821350,0.534839,0.349794,0.776640,0.629018,0.476746,0.919796,0.878922,0.726650,0.277009,0.442637,0.579515,0.548174,0.622327,0.681606,0.675125,0.649482,0.931510,0.925029,0.899386,0.801215,0.582989,0.321268,0.907812,0.832893,0.571172},
        {0.532560,0.825404,0.686261,0.149418,0.780694,0.422826,0.735770,0.923850,0.882976,0.730704,0.807783,0.766910,0.761205,0.221431,0.626381,0.467503,0.449371,0.666508,0.935564,0.929083,0.903440,0.819498,0.813017,0.787373,0.911866,0.836947,0.575226,0.795800,0.720881,0.758179,0.311545,0.542061,0.699189},
        {0.749194,0.265271,0.237800,0.737177,0.444495,0.307618,0.774630,0.571446,0.284935,0.439696,0.542940,0.679932,0.349794,0.693037,0.629018,0.635757,0.358103,0.777570,0.329611,0.231152,0.442637,0.554655,0.548174,0.771604,0.681606,0.675125,0.649482,0.702493,0.456038,0.583814,0.657908,0.714420,0.321268},
        {0.648627,0.543757,0.352705,0.532560,0.825404,0.538893,0.340434,0.780694,0.601329,0.449057,0.923850,0.882976,0.730704,0.807783,0.766910,0.614637,0.167724,0.626381,0.653917,0.647436,0.621793,0.935564,0.929083,0.903440,0.819498,0.813017,0.787373,0.911866,0.836947,0.575226,0.795800,0.720881,0.459159},
        {0.356811,0.745097,0.458586,0.749194,0.700386,0.327917,0.737177,0.843542,0.802669,0.774630,0.399784,0.167133,0.503262,0.542940,0.679932,0.349794,0.693037,0.344999,0.855257,0.848776,0.823132,0.724962,0.397762,0.442637,0.831559,0.756640,0.771604,0.424360,0.577820,0.436670,0.702493,0.456038,0.618882},
        {0.737721,0.352217,0.071058,0.648627,0.543757,0.352705,0.531974,0.825404,0.538893,0.340434,0.780694,0.601329,0.449057,0.923850,0.882976,0.730704,0.281063,0.534914,0.583569,0.455896,0.626381,0.653917,0.647436,0.621793,0.935564,0.929083,0.903440,0.805269,0.555300,0.341158,0.911866,0.836947,0.575226},
        {0.568319,0.832896,0.699685,0.113658,0.788186,0.458586,0.749194,0.931341,0.890468,0.738195,0.843542,0.802669,0.774630,0.208006,0.633873,0.503262,0.456863,0.679932,0.943056,0.936575,0.910932,0.855257,0.848776,0.823132,0.919358,0.844439,0.582717,0.831559,0.756640,0.771604,0.319036,0.577820,0.706681},
        {0.774331,0.357549,0.265489,0.762314,0.352217,0.332755,0.799766,0.543757,0.257246,0.531974,0.499047,0.705069,0.340434,0.718173,0.601329,0.660894,0.450381,0.802707,0.393101,0.258841,0.534914,0.462377,0.455896,0.796740,0.653917,0.647436,0.621793,0.727630,0.363760,0.608950,0.630219,0.739557,0.341158}};
    bool found_error = false;
    int i, j;    
    for (i = 0; i < 36; i++){
        for (j = 0; j < 33; j++){
            if(fabs(distance_matrix[i][j]-crp_distance_matrix[i][j]) > 0.00001){
                found_error = true;
                break;
            }
        }
        if(found_error)
            break;
    }
    if(!found_error)
        cout << "test_cross_distance_matrix() passed" << endl;
    else
        cout << "test_cross_distance_matrix() failed: distance value error at " 
             << i  << "," << j << " ( " << distance_matrix[i][j] << " != " 
             << crp_distance_matrix[i][j] << " )" << endl;  
}

void test_cross_recurrence_matrix(int** crp_recurrence_matrix){
    int recurrence_matrix[36][33] = 
           {{0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0},
            {1,1,1,0,1,1,0,0,1,0,1,1,1,0,0,1,0,1,0,0,0,1,1,1,0,0,0,1,1,1,0,0,1},
            {0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0},
            {0,1,0,0,1,1,0,1,1,0,0,0,0,0,1,0,1,0,1,0,1,0,0,0,1,1,1,0,1,0,1,0,1},
            {0,1,1,0,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
            {1,0,0,0,0,1,0,0,0,0,1,1,0,0,0,1,0,1,0,0,0,0,1,1,0,0,0,1,0,1,0,1,0},
            {0,1,1,0,1,1,0,0,0,1,0,0,1,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0},
            {0,0,0,1,0,0,0,0,0,0,0,0,0,1,1,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0},
            {1,0,1,0,0,1,0,0,0,0,1,1,1,0,0,1,0,1,0,0,0,0,1,1,0,0,0,1,1,1,0,1,0},
            {0,0,1,0,0,1,1,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0},
            {1,1,0,1,0,1,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,1,1,0,0,0,1,1,1},
            {0,0,0,1,0,1,1,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0},
            {0,1,1,0,1,1,0,0,1,1,0,0,1,0,0,0,1,0,1,1,1,0,0,0,0,0,0,0,1,0,0,0,1},
            {0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {1,0,1,0,1,1,0,0,0,0,1,1,1,0,0,1,0,1,0,0,0,1,1,1,0,0,0,1,1,1,0,1,0},
            {0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0},
            {0,1,0,0,0,1,0,1,1,0,0,0,0,0,1,0,1,0,1,0,1,0,0,0,1,1,1,0,0,0,1,0,1},
            {0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {1,0,1,0,1,1,0,0,1,0,1,1,1,0,0,1,0,1,0,0,0,1,1,1,0,0,0,1,1,1,0,0,1},
            {0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0},
            {0,1,0,0,0,1,0,1,1,0,0,0,0,0,1,0,1,0,1,0,1,0,0,0,1,1,1,0,1,0,1,0,1},
            {0,0,1,0,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
            {1,0,1,0,0,1,0,0,0,0,1,1,0,0,0,1,0,1,0,0,0,0,1,1,0,0,0,1,0,1,0,1,0},
            {0,1,1,0,0,1,0,0,0,1,0,0,1,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0},
            {0,0,0,1,0,1,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0},
            {0,1,1,0,1,1,0,0,1,0,1,0,1,0,0,0,1,0,1,1,0,1,1,0,0,0,0,0,1,0,0,0,1},
            {0,0,1,0,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {1,0,1,0,0,1,0,0,0,0,1,1,0,1,0,1,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,1,0},
            {0,1,1,0,0,1,1,0,0,1,0,0,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0},
            {0,0,0,1,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0},
            {0,1,1,0,1,1,0,0,1,1,0,0,1,0,0,0,1,0,1,1,1,0,0,0,0,0,0,0,1,0,0,0,1},
            {0,0,1,0,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
            {1,0,1,0,0,1,0,0,0,0,1,1,0,0,0,1,0,1,0,0,0,0,1,1,0,0,0,1,0,1,0,1,0},
            {0,1,1,0,0,1,0,0,0,1,0,0,1,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0},
            {0,0,0,1,0,1,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0},
            {0,1,1,0,1,1,0,0,1,0,1,0,1,0,0,0,1,0,1,1,0,1,1,0,0,0,0,0,1,0,0,0,1}};
    bool found_error = false;
    int i,j;
    for(i = 0; i < 36; i++){
        for(j = 0; j < 33; j++){
            if(recurrence_matrix[i][j] != crp_recurrence_matrix[i][j]){
                found_error = true;
                break;
            }
        }
        if(found_error)
            break;
    }
    if(!found_error)
        cout << "test_cross_recurrence_matrix() passed" << endl;
    else
        cout << "test_cross_recurrence_matrix() failed: recurrence value error at " 
             << i  << "," << j << " ( " << recurrence_matrix[i][j] << " != " 
             << crp_recurrence_matrix[i][j] << " )" << endl;    
}

int main(int argc, char** argv) {
    double time_series_1[] = {0.20000000, 0.60800000, 0.90567680, 0.32462007, 
                              0.83311914, 0.52832022, 0.94695227, 0.19088795, 
                              0.58690901, 0.92129793, 0.27553060, 0.75853125, 
                              0.69601406, 0.80399826, 0.59882321, 0.91288909, 
                              0.30218586, 0.80130435, 0.60501961, 0.90808935, 
                              0.31715971, 0.82296382, 0.55363861, 0.93906702, 
                              0.21743658, 0.64660007, 0.86833200, 0.43445986, 
                              0.93367706, 0.23531199, 0.68377297, 0.82166448, 
                              0.55682146, 0.93773102, 0.22188790, 0.65608392, 
                              0.85742368, 0.46454358, 0.94522280, 0.19675130};

    double time_series_2[] = {0.20001000, 0.64002400, 0.92157312, 0.28910442, 
                              0.82209222, 0.58502640, 0.97108205, 0.11232682, 
                              0.39883801, 0.95906501, 0.15703728, 0.52950629, 
                              0.99651751, 0.01388143, 0.05475495, 0.20702737, 
                              0.65666815, 0.90182036, 0.35416159, 0.91492463, 
                              0.31135020, 0.85764502, 0.48836017, 0.99945806, 
                              0.00216660, 0.00864760, 0.03429129, 0.13246159, 
                              0.45966208, 0.99349141, 0.02586492, 0.10078369, 
                              0.36250535, 0.92438088, 0.27960346, 0.80570146, 
                              0.62618647, 0.93630790, 0.23854168};
    int time_series_1_length = 40;
    int time_series_2_length = 39;    
    int dimension = 3;
    int delay_time_series_1 = 2;
    int delay_time_series_2 = 3;
    double threshold = 0.5;
    string norm = "supremum";
    CrossRecurrencePlot crp(time_series_1, time_series_2, 
                            time_series_1_length, time_series_2_length, 
                            dimension, delay_time_series_1, delay_time_series_2,
                            threshold, norm);
    
    cout << "test_cross_recurrence_plot_supremum.cpp" << endl << endl;
    test_delay_time_series_1(crp.get_delay_time_series_1());
    test_delay_time_series_2(crp.get_delay_time_series_2());
    test_dimension(crp.get_dimension());
    test_threshold(crp.get_threshold());
    test_norm(crp.get_norm());
    test_time_series_1_length(crp.get_time_series_1_length());
    test_time_series_2_length(crp.get_time_series_2_length());
    test_time_series_1(crp.get_time_series_1());
    test_time_series_2(crp.get_time_series_2());
    test_number_of_vectors_1(crp.get_number_of_vectors_1());
    test_number_of_vectors_2(crp.get_number_of_vectors_2());    
    test_cross_distance_matrix(crp.get_cross_distance_matrix());
    test_cross_recurrence_matrix(crp.get_cross_recurrence_matrix());
    
    return (EXIT_SUCCESS);
}
