/* 
 * File:   test_cross_recurrence_plot_manhattan.cpp
 * Author: Barbara Reis
 * Date:   12.06.2020
 */
#include <stdlib.h>
#include <iostream>
#include "../../CrossRecurrencePlot.h"

void test_delay_time_series_1(int rp_delay){
    int delay = 2;
    if(delay == rp_delay)
        cout << "test_delay_time_series_1() passed" << endl;
    else
        cout << "test_delay_time_series_1() failed: " << delay << " != " 
             << rp_delay << endl;
}

void test_delay_time_series_2(int rp_delay){
    int delay = 3;
    if(delay == rp_delay)
        cout << "test_delay_time_series_2() passed" << endl;
    else
        cout << "test_delay_time_series_2() failed: " << delay << " != " 
             << rp_delay << endl;
}

void test_dimension(int rp_dimension){
    int dimension = 3;    
    if(dimension == rp_dimension)
        cout << "test_dimension() passed" << endl;
    else
        cout << "test_dimension() failed: " << dimension << " != " 
             << rp_dimension << endl;
}

void test_time_series_1_length(int rp_time_series_1_length){
    int time_series_1_length = 40;    
    if(time_series_1_length == rp_time_series_1_length)
        cout << "test_time_series_1_length() passed" << endl;
    else    
        cout << "test_time_series_1_length() failed: " << time_series_1_length 
             << " != " << rp_time_series_1_length << endl;    
}

void test_time_series_2_length(int rp_time_series_2_length){
    int time_series_2_length = 39;    
    if(time_series_2_length == rp_time_series_2_length)
        cout << "test_time_series_2_length() passed" << endl;
    else    
        cout << "test_time_series_2_length() failed: " << time_series_2_length 
             << " != " << rp_time_series_2_length << endl;    
}

void test_time_series_1(double* rp_time_series_1){
    double time_series_1[] = {0.20000000, 0.60800000, 0.90567680, 0.32462007, 
                              0.83311914, 0.52832022, 0.94695227, 0.19088795, 
                              0.58690901, 0.92129793, 0.27553060, 0.75853125, 
                              0.69601406, 0.80399826, 0.59882321, 0.91288909, 
                              0.30218586, 0.80130435, 0.60501961, 0.90808935, 
                              0.31715971, 0.82296382, 0.55363861, 0.93906702, 
                              0.21743658, 0.64660007, 0.86833200, 0.43445986, 
                              0.93367706, 0.23531199, 0.68377297, 0.82166448, 
                              0.55682146, 0.93773102, 0.22188790, 0.65608392, 
                              0.85742368, 0.46454358, 0.94522280, 0.19675130};
    bool found_error = false;
    int i;    
    for(i = 0; i < 40; i++){
        if(time_series_1[i] != rp_time_series_1[i]){
            found_error = true;
            break;
        }
    }
    if(!found_error)
        cout << "test_time_series_1() passed" << endl;
    else
        cout << "test_time_series_1() failed: time series value error at " 
             << i << " ( " << time_series_1[i] << " != " << rp_time_series_1[i] 
             << " )" << endl;
}

void test_time_series_2(double* rp_time_series_2){
    double time_series_2[] = {0.20001000, 0.64002400, 0.92157312, 0.28910442, 
                              0.82209222, 0.58502640, 0.97108205, 0.11232682, 
                              0.39883801, 0.95906501, 0.15703728, 0.52950629, 
                              0.99651751, 0.01388143, 0.05475495, 0.20702737, 
                              0.65666815, 0.90182036, 0.35416159, 0.91492463, 
                              0.31135020, 0.85764502, 0.48836017, 0.99945806, 
                              0.00216660, 0.00864760, 0.03429129, 0.13246159, 
                              0.45966208, 0.99349141, 0.02586492, 0.10078369, 
                              0.36250535, 0.92438088, 0.27960346, 0.80570146, 
                              0.62618647, 0.93630790, 0.23854168};
    bool found_error = false;
    int i;    
    for(i = 0; i < 39; i++){
        if(time_series_2[i] != rp_time_series_2[i]){
            found_error = true;
            break;
        }
    }
    if(!found_error)
        cout << "test_time_series_2() passed" << endl;
    else
        cout << "test_time_series_2() failed: time series value error at " 
             << i << " ( " << time_series_2[i] << " != " << rp_time_series_2[i] 
             << " )" << endl;
}

void test_threshold(double rp_threshold){
    double threshold = 0.5;
    if(threshold == rp_threshold)
        cout << "test_threshold() passed" << endl;
    else
        cout << "test_threshold() failed: " << threshold << " != " 
             << rp_threshold << endl;
}

void test_norm(string rp_norm){
    string norm = "manhattan";
    if(norm.compare(rp_norm) == 0)
        cout << "test_norm() passed" << endl;
    else
        cout << "test_norm() failed: " << norm << " != " << rp_norm << endl;
}

void test_number_of_vectors_1(int rp_number_of_vectors_1){
    int number_of_vectors_1 = 36;    
    if(number_of_vectors_1 == rp_number_of_vectors_1)
        cout << "test_number_of_vectors_1() passed" << endl;
    else
        cout << "test_number_of_vectors_1() failed: " << number_of_vectors_1 
             << " != " << rp_number_of_vectors_1 << endl;
}

void test_number_of_vectors_2(int rp_number_of_vectors_2){
    int number_of_vectors_2 = 33;    
    if(number_of_vectors_2 == rp_number_of_vectors_2)
        cout << "test_number_of_vectors_2() passed" << endl;
    else
        cout << "test_number_of_vectors_2() failed: " << number_of_vectors_2 
             << " != " << rp_number_of_vectors_2 << endl;
}

void test_cross_distance_matrix(double** crp_distance_matrix){
    double distance_matrix[36][33] = 
       {{0.754545,1.244401,1.476505,0.280456,2.091524,1.195478,0.987869,1.655550,1.353373,1.475997,1.111209,1.249129,1.974124,0.516933,0.670870,0.583068,0.810675,1.462486,1.033146,1.956713,1.003959,2.261813,1.558846,1.831216,1.778303,1.369703,0.724137,1.038612,1.618071,1.364081,0.399772,0.828478,0.857058},
        {0.886267,0.945490,0.703462,1.396102,0.797668,0.098378,1.465724,1.177695,0.887613,1.344255,0.890049,0.721859,0.680269,1.312771,1.347415,0.759839,0.678933,0.778228,1.313017,0.990337,1.465517,0.967957,0.504270,1.146958,1.300447,1.161931,1.408395,1.170354,0.620891,0.700758,1.279762,0.960221,1.016355},
        {1.273811,1.111305,0.812103,0.766648,1.594292,1.172377,0.240916,2.402503,1.702649,0.956711,1.858161,1.199667,1.309723,1.100274,1.555225,1.266914,0.789406,0.578131,1.520827,1.292311,1.673326,1.693475,1.729078,0.939148,2.525255,2.116655,1.616205,1.603041,1.845699,0.699679,1.291839,1.369053,1.279000},
        {1.144020,0.687737,0.861609,1.246455,0.947316,0.728507,1.882836,0.760583,0.211537,1.118782,1.147802,1.389384,1.156464,1.163123,0.763828,0.958508,1.016125,1.602740,0.547588,0.812505,0.641004,1.117605,0.952187,1.971470,0.883335,0.474735,0.927117,1.428107,0.651294,1.449500,1.130114,1.217973,0.362920},
        {1.675130,0.792537,0.638451,0.940301,1.275524,0.853610,0.559684,2.083735,1.383881,0.555393,1.678912,1.510722,1.136071,1.437537,1.099055,1.489618,0.307027,1.116852,1.153007,1.118659,1.126892,1.423759,1.410311,1.485582,2.206487,1.797887,1.069771,1.959217,1.526931,0.963612,0.869103,1.749083,0.960232},
        {0.476311,1.551879,1.309851,1.057177,1.136594,0.656448,1.286158,1.357261,1.334643,1.950645,0.812919,0.156797,1.051473,0.986592,1.794445,0.548219,1.285322,0.572123,1.760047,1.596727,1.912547,1.306883,0.683836,0.699928,1.480013,1.608961,1.855425,0.563965,0.800457,0.752385,1.531060,0.531262,1.463385},
        {1.740298,0.705315,0.150569,1.725555,0.717936,0.803973,1.117273,1.526146,0.826293,0.490224,1.744080,1.575890,0.508078,1.642224,1.242928,1.554787,0.831129,1.044618,1.136891,0.397459,1.289390,0.817119,1.220985,1.323084,1.648899,1.240299,1.406218,2.024385,0.977488,0.801114,1.609215,1.814251,0.840228},
        {0.853866,1.194546,1.426650,0.348534,2.041669,1.145623,1.055947,1.587472,1.303518,1.394901,1.043130,1.348450,1.924270,0.598030,0.602792,0.682390,0.742325,1.561807,0.983291,1.906858,0.922862,2.211958,1.508992,1.930537,1.710224,1.301624,0.624816,1.119709,1.568216,1.408566,0.300451,0.909575,0.807203},
        {0.675541,1.183364,0.941336,1.256407,0.937364,0.291698,1.368211,1.275208,1.083306,1.582130,0.730867,0.483985,0.819964,1.173076,1.543108,0.620144,0.916807,0.654175,1.508709,1.228212,1.661209,1.107652,0.601784,0.951266,1.397961,1.357623,1.604087,0.932480,0.718404,0.603245,1.279722,0.730492,1.212047},
        {1.357799,1.036506,0.578940,0.999811,1.392371,0.970457,0.442837,2.200582,1.500728,0.872724,1.656241,1.193390,1.076560,1.120206,1.502480,1.172287,0.736661,0.662118,1.468082,1.071895,1.620582,1.491554,1.527158,0.991893,2.323334,1.914734,1.563460,1.641885,1.643778,0.469923,1.239094,1.431752,1.171419},
        {0.854689,0.977068,0.957015,0.648884,1.572035,0.675989,1.356297,1.287122,0.833883,1.375834,0.858471,1.198232,1.454635,0.617096,0.714055,0.669178,0.710511,1.411588,0.836919,1.437224,0.903796,1.742324,1.039357,1.780318,1.409875,1.001274,0.775035,1.138776,1.098582,1.258348,0.505396,0.928642,0.556944},
        {1.131608,0.937163,0.896065,0.682687,1.511084,0.962048,0.451246,2.192173,1.492319,1.098915,1.647832,0.989337,1.393685,0.894015,1.403137,1.056585,0.637318,0.722506,1.368739,1.376273,1.521239,1.681373,1.518749,1.091236,2.314925,1.906325,1.464117,1.415695,1.635369,0.783641,1.139752,1.205561,1.072077},
        {1.474619,0.469118,0.336008,1.436048,0.757723,0.538293,1.329641,1.313778,0.613924,0.755904,1.478401,1.310211,0.744275,1.352716,0.953421,1.289107,0.541622,1.190552,0.900694,0.622912,1.053193,0.928012,0.955306,1.559281,1.436530,1.027930,1.116710,1.758706,0.756974,1.037311,1.319707,1.548572,0.604031},
        {1.397551,0.943749,0.847904,0.730847,1.462923,1.004821,0.408473,2.234946,1.535092,0.832972,1.690605,1.233142,1.345524,1.159958,1.250266,1.212039,0.462310,0.897515,1.304219,1.328112,1.346230,1.633212,1.561522,1.266245,2.357699,1.949098,1.289108,1.681637,1.678142,0.744274,0.964743,1.471504,1.111443},
        {0.777957,1.053800,0.811772,1.332660,0.861110,0.185962,1.420636,1.222783,0.977570,1.452566,0.781739,0.613549,0.743711,1.249329,1.437372,0.696397,0.787243,0.706600,1.402974,1.098648,1.555474,1.031399,0.549359,1.057001,1.345536,1.251888,1.498352,1.062044,0.665979,0.655670,1.216320,0.851910,1.106311},
        {1.288072,1.089415,0.734213,0.844538,1.530826,1.108912,0.304382,2.339037,1.639184,0.942451,1.794696,1.136201,1.231833,1.050479,1.555389,1.203449,0.789570,0.592392,1.520991,1.214422,1.673491,1.630010,1.665613,0.938984,2.461790,2.053190,1.616369,1.572158,1.782234,0.621789,1.292004,1.362025,1.224329},
        {1.072013,0.759744,0.721059,1.021049,1.172722,0.701369,1.702299,0.941120,0.434570,1.158509,1.075795,1.362246,1.129326,0.937718,0.550041,0.886502,0.835588,1.575602,0.619594,1.037910,0.686471,1.343010,0.925049,1.944332,1.063872,0.655272,0.701712,1.356100,0.699268,1.422362,0.904709,1.145967,0.339619},
        {1.368397,0.957914,0.867458,0.711294,1.482477,1.018987,0.394307,2.249112,1.549258,0.862125,1.704771,1.203989,1.365077,1.130805,1.264432,1.182886,0.486075,0.873749,1.318384,1.347666,1.369995,1.652766,1.575688,1.242479,2.371864,1.963264,1.312874,1.652484,1.692308,0.755033,0.988508,1.442351,1.125609},
        {0.850508,0.981249,0.739221,1.375264,0.818507,0.125804,1.450847,1.192572,0.917412,1.380014,0.854290,0.686100,0.701107,1.291933,1.377214,0.739001,0.714692,0.748430,1.342815,1.026096,1.495315,0.988796,0.519148,1.117160,1.315325,1.191729,1.438193,1.134595,0.635769,0.685880,1.258924,0.924461,1.046153},
        {1.273954,1.095677,0.791650,0.787101,1.578664,1.156749,0.256544,2.386875,1.687021,0.956569,1.842533,1.184039,1.289270,1.084646,1.559908,1.251286,0.794089,0.578274,1.525509,1.271858,1.678009,1.677847,1.713450,0.934466,2.509627,2.101027,1.620887,1.587413,1.830071,0.679226,1.296522,1.353425,1.263372},
        {1.135329,0.696428,0.817203,1.187127,1.006644,0.734737,1.838430,0.804989,0.268492,1.095193,1.139111,1.395614,1.162694,1.103796,0.704500,0.949818,0.971718,1.608971,0.556278,0.871832,0.634774,1.176932,0.958417,1.977700,0.927742,0.519142,0.867790,1.419416,0.657524,1.455730,1.070787,1.209283,0.318514},
        {1.597398,0.834188,0.700412,0.878339,1.317175,0.895260,0.518034,2.125385,1.425532,0.633124,1.601180,1.432990,1.198032,1.359806,1.140705,1.411887,0.348678,1.059431,1.194658,1.180620,1.184313,1.485720,1.451961,1.428161,2.248138,1.839538,1.127192,1.881485,1.568582,0.906191,0.832199,1.671352,1.001882},
        {0.528046,1.447046,1.205018,1.108913,1.084858,0.551615,1.287257,1.356162,1.280447,1.845812,0.811820,0.220302,0.967459,1.025581,1.740249,0.494023,1.180489,0.573221,1.705851,1.491894,1.858351,1.255147,0.682737,0.754124,1.478914,1.554765,1.801229,0.668798,0.799358,0.647552,1.476864,0.582998,1.409189},
        {1.633175,0.796668,0.114689,1.499050,0.928671,0.696849,0.906538,1.736881,1.037028,0.597348,1.636957,1.468766,0.577321,1.415718,1.262642,1.447663,0.604624,0.937495,1.228244,0.608195,1.380743,1.027854,1.113862,1.231731,1.859634,1.451034,1.323622,1.917262,1.180078,0.709761,1.382710,1.707128,0.931581},
        {0.634059,1.290177,1.522281,0.199806,2.137300,1.241255,0.907219,1.736200,1.399149,1.596464,1.191859,1.157503,2.019901,0.433971,0.818497,0.600612,0.931141,1.307147,1.078922,2.002489,1.124425,2.307589,1.604623,1.675876,1.858953,1.450352,0.879476,0.936738,1.663847,1.409857,0.555111,0.708012,0.902835},
        {1.327716,0.517194,0.589066,1.617871,0.575900,0.391390,1.610293,1.033126,0.523366,0.902807,1.331497,1.163307,0.696200,1.534540,1.135244,1.142204,0.743581,1.142476,0.948769,0.548889,1.101269,0.746189,0.808402,1.511206,1.155879,0.797683,1.298534,1.611802,0.564906,0.989235,1.501531,1.401669,0.658566},
        {1.600204,0.911339,0.686827,0.891925,1.394326,0.972411,0.440883,2.202537,1.502683,0.630319,1.658195,1.435795,1.184447,1.362611,1.217857,1.414692,0.425829,0.971500,1.271809,1.167035,1.272244,1.493509,1.529112,1.340230,2.325289,1.916689,1.215123,1.884290,1.645733,0.818260,0.909350,1.674157,1.079033},
        {0.437660,1.501682,1.259654,1.018526,1.175245,0.606251,1.435228,1.208191,1.096726,1.900448,0.663849,0.355759,1.057845,0.935195,1.556528,0.382263,1.235125,0.721192,1.522129,1.546530,1.674629,1.345533,0.642567,0.937846,1.330943,1.371043,1.617507,0.614162,0.701792,0.702188,1.293142,0.492611,1.225467},
        {1.542596,0.876467,0.268834,1.334125,1.082815,0.660901,0.752393,1.891026,1.191172,0.687927,1.546378,1.378188,0.742246,1.305004,1.342441,1.357085,0.576622,0.846916,1.308042,0.762339,1.460542,1.181998,1.217602,1.151933,2.013778,1.605178,1.403420,1.826683,1.334222,0.629962,1.217785,1.616549,1.011380},
        {0.601213,1.230544,1.461792,0.224544,2.076812,1.180766,0.931957,1.711462,1.338660,1.629310,1.167121,1.097015,1.959412,0.409233,0.887094,0.575873,0.963987,1.238550,1.090395,1.942000,1.157272,2.247100,1.544134,1.607280,1.834214,1.425614,0.948073,0.912000,1.603358,1.349368,0.623708,0.678012,0.842346},
        {1.500674,0.418581,0.442955,1.546106,0.647664,0.564348,1.464182,1.179237,0.479383,0.729849,1.504456,1.336266,0.794812,1.462775,1.063479,1.315163,0.651680,1.241089,0.850156,0.512853,1.002656,0.817953,0.981361,1.609819,1.301989,0.893389,1.226769,1.784761,0.737864,1.087848,1.429766,1.574627,0.586801},
        {1.585279,0.841036,0.709859,0.868892,1.324879,0.902109,0.511185,2.132234,1.432380,0.645244,1.589061,1.420871,1.207479,1.347687,1.147554,1.399768,0.355526,1.049911,1.201506,1.190067,1.193834,1.495167,1.458810,1.418641,2.254986,1.846386,1.136712,1.869366,1.575430,0.896670,0.839047,1.659232,1.008731},
        {0.537686,1.428504,1.186476,1.118553,1.075218,0.533072,1.290532,1.352888,1.268271,1.827269,0.808546,0.238845,0.957819,1.035221,1.728072,0.482289,1.161947,0.576496,1.693674,1.473351,1.846174,1.245507,0.679463,0.766301,1.475640,1.542588,1.789052,0.687340,0.796084,0.629010,1.464687,0.592638,1.397012},
        {1.611239,0.815932,0.152921,1.458146,0.966902,0.674913,0.868306,1.775113,1.075259,0.619284,1.615021,1.446831,0.618225,1.374815,1.281906,1.425727,0.563720,0.915559,1.247507,0.646426,1.400007,1.066085,1.101689,1.212468,1.897865,1.489265,1.342885,1.895326,1.218309,0.690497,1.341806,1.685192,0.950845},
        {0.616056,1.286363,1.518467,0.194717,2.133487,1.237441,0.902130,1.741289,1.395335,1.614466,1.196948,1.153690,2.016087,0.439060,0.845402,0.605700,0.949144,1.280241,1.075551,1.998675,1.142428,2.303775,1.600809,1.648971,1.864041,1.455441,0.906382,0.941827,1.660033,1.406043,0.582017,0.707839,0.899021},
        {1.405844,0.458033,0.588059,1.635832,0.557939,0.469518,1.609286,1.034133,0.464205,0.845231,1.409626,1.241435,0.755360,1.552500,1.153205,1.220332,0.742574,1.201637,0.889608,0.470761,1.042108,0.728228,0.886531,1.570367,1.156886,0.748285,1.316494,1.689931,0.643034,1.048396,1.519491,1.479797,0.676527}};
    bool found_error = false;
    int i, j;    
    for (i = 0; i < 36; i++){
        for (j = 0; j < 33; j++){
            if(fabs(distance_matrix[i][j]-crp_distance_matrix[i][j]) > 0.00001){
                found_error = true;
                break;
            }
        }
        if(found_error)
            break;
    }
    if(!found_error)
        cout << "test_cross_distance_matrix() passed" << endl;
    else
        cout << "test_cross_distance_matrix() failed: distance value error at " 
             << i  << "," << j << " ( " << distance_matrix[i][j] << " != " 
             << crp_distance_matrix[i][j] << " )" << endl;  
}

void test_cross_recurrence_matrix(int** crp_recurrence_matrix){
    int recurrence_matrix[36][33] = 
           {{0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0},
            {0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0},
            {0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
            {0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0},
            {0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,1,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0}};
    bool found_error = false;
    int i,j;
    for(i = 0; i < 36; i++){
        for(j = 0; j < 33; j++){
            if(recurrence_matrix[i][j] != crp_recurrence_matrix[i][j]){
                found_error = true;
                break;
            }
        }
        if(found_error)
            break;
    }
    if(!found_error)
        cout << "test_cross_recurrence_matrix() passed" << endl;
    else
        cout << "test_cross_recurrence_matrix() failed: recurrence value error at " 
             << i  << "," << j << " ( " << recurrence_matrix[i][j] << " != " 
             << crp_recurrence_matrix[i][j] << " )" << endl;    
}

int main(int argc, char** argv) {
    double time_series_1[] = {0.20000000, 0.60800000, 0.90567680, 0.32462007, 
                              0.83311914, 0.52832022, 0.94695227, 0.19088795, 
                              0.58690901, 0.92129793, 0.27553060, 0.75853125, 
                              0.69601406, 0.80399826, 0.59882321, 0.91288909, 
                              0.30218586, 0.80130435, 0.60501961, 0.90808935, 
                              0.31715971, 0.82296382, 0.55363861, 0.93906702, 
                              0.21743658, 0.64660007, 0.86833200, 0.43445986, 
                              0.93367706, 0.23531199, 0.68377297, 0.82166448, 
                              0.55682146, 0.93773102, 0.22188790, 0.65608392, 
                              0.85742368, 0.46454358, 0.94522280, 0.19675130};

    double time_series_2[] = {0.20001000, 0.64002400, 0.92157312, 0.28910442, 
                              0.82209222, 0.58502640, 0.97108205, 0.11232682, 
                              0.39883801, 0.95906501, 0.15703728, 0.52950629, 
                              0.99651751, 0.01388143, 0.05475495, 0.20702737, 
                              0.65666815, 0.90182036, 0.35416159, 0.91492463, 
                              0.31135020, 0.85764502, 0.48836017, 0.99945806, 
                              0.00216660, 0.00864760, 0.03429129, 0.13246159, 
                              0.45966208, 0.99349141, 0.02586492, 0.10078369, 
                              0.36250535, 0.92438088, 0.27960346, 0.80570146, 
                              0.62618647, 0.93630790, 0.23854168};
    int time_series_1_length = 40;
    int time_series_2_length = 39;    
    int dimension = 3;
    int delay_time_series_1 = 2;
    int delay_time_series_2 = 3;
    double threshold = 0.5;
    string norm = "manhattan";
    CrossRecurrencePlot crp(time_series_1, time_series_2, 
                            time_series_1_length, time_series_2_length, 
                            dimension, delay_time_series_1, delay_time_series_2,
                            threshold, norm);
    
    cout << "test_cross_recurrence_plot_manhattan.cpp" << endl << endl;
    test_delay_time_series_1(crp.get_delay_time_series_1());
    test_delay_time_series_2(crp.get_delay_time_series_2());
    test_dimension(crp.get_dimension());
    test_threshold(crp.get_threshold());
    test_norm(crp.get_norm());
    test_time_series_1_length(crp.get_time_series_1_length());
    test_time_series_2_length(crp.get_time_series_2_length());
    test_time_series_1(crp.get_time_series_1());
    test_time_series_2(crp.get_time_series_2());
    test_number_of_vectors_1(crp.get_number_of_vectors_1());
    test_number_of_vectors_2(crp.get_number_of_vectors_2());    
    test_cross_distance_matrix(crp.get_cross_distance_matrix());
    test_cross_recurrence_matrix(crp.get_cross_recurrence_matrix());
    
    return (EXIT_SUCCESS);
}
